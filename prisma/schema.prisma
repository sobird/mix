generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "sqlite"
  url      = env("DATABASE_URL")
}

model User {
  id            Int          @id @default(autoincrement())
  username      String?
  nickname      String?
  realname      String?
  email         String
  emailVerified DateTime?    @map("email_verified")
  password      String?
  salt          String       @default("7f30b4630016f4a696088033c299fc2a")
  ip            Int          @default(0)
  createdAt     DateTime     @map("created_at")
  updatedAt     DateTime     @updatedAt @map("updated_at")
  accounts      Account[]
  sessions      Session[]
  UserRole      UserRole[]

  @@map("users")
}

model Account {
  id                  Int      @id @default(autoincrement())
  type                String
  provider            String
  providerAccountId   String   @map("provider_account_id")
  refresh_token       String?  @map("")
  access_token        String?
  expires_at          Int?
  token_type          String?
  scope               String?
  id_token            String?
  session_state       String?
  userId              Int?      @map("user_id")
  created_at          DateTime
  updated_at          DateTime
  users               User?     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("accounts")
}

model Group {
  id          Int      @id @default(autoincrement())
  name        String   @unique(map: "sqlite_autoindex_groups_1")
  description String?
  parent_id   Int?
  created_at  DateTime
  updated_at  DateTime

  @@map("groups")
}

model Menu {
  id          Int      @id @default(autoincrement())
  name        String
  href        Int
  icon        String?
  description String?
  parent_id   Int?
  sort        Int?
  created_at  DateTime
  updated_at  DateTime

  @@map("menus")
}

model Permission {
  id               Int                @id @default(autoincrement())
  name             String             @unique(map: "sqlite_autoindex_permissions_1")
  description      String?
  operator         String?
  target           String?
  created_at       DateTime
  updated_at       DateTime
  role_permissions RolePermission[]

  @@map("permissions")
}

model RolePermission {
  permission_id Int
  role_id       Int
  created_at    DateTime
  updated_at    DateTime
  roles         Role       @relation(fields: [role_id], references: [id], onDelete: Cascade)
  permissions   Permission @relation(fields: [permission_id], references: [id], onDelete: Cascade)

  @@id([permission_id, role_id])
  @@map("role_permissions")
}

model Role {
  id               Int                @id @default(autoincrement())
  name             String             @unique(map: "sqlite_autoindex_roles_1")
  description      String?
  parent_id        Int?               @default(0)
  created_at       DateTime
  updated_at       DateTime
  role_permissions RolePermission[]
  UserRole       UserRole[]

  @@map("roles")
}

model Session {
  id            Int      @id @default(autoincrement())
  expires       DateTime
  session_token String   @unique(map: "sqlite_autoindex_sessions_1")
  user_id       Int?
  created_at    DateTime
  updated_at    DateTime
  users         User?    @relation(fields: [user_id], references: [id], onDelete: Cascade)
}

model UserRole {
  user_id    Int
  role_id    Int
  created_at DateTime
  updated_at DateTime
  roles      Role    @relation(fields: [role_id], references: [id], onDelete: Cascade)
  users      User     @relation(fields: [user_id], references: [id], onDelete: Cascade)

  @@id([user_id, role_id])
}

model VerificationToken {
  token      String  @unique
  identifier String
  expires    DateTime

  @@unique([identifier, token])
}
