generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "sqlite"
  url      = env("DATABASE_URL")
}

model User {
  id            String     @id @default(cuid())
  username      String?
  nickname      String?
  realname      String?
  email         String     @unique
  avatar        String?
  emailVerified DateTime?  @map("email_verified")
  password      String?
  salt          String     @default(uuid())
  ip            Int        @default(0)
  createdAt     DateTime?  @default(now()) @map("created_at")
  updatedAt     DateTime?  @updatedAt @map("updated_at")
  accounts      Account[]
  sessions      Session[]
  UserRole      UserRole[]

  @@map("users")
}

model Account {
  userId            String   @map("user_id")
  type              String
  provider          String
  providerAccountId String
  refresh_token     String?
  access_token      String?
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String?
  session_state     String?
  createdAt         DateTime @default(now()) @map("created_at")
  updatedAt         DateTime @updatedAt @map("updated_at")
  user              User?    @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@id([provider, providerAccountId])
  @@map("accounts")
}

model Session {
  sessionToken String    @unique @map("session_token")
  userId       String
  expires      DateTime
  createdAt    DateTime? @default(now()) @map("created_at")
  updatedAt    DateTime? @updatedAt @map("updated_at")
  user         User?     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("sessions")
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime
  createdAt  DateTime @default(now()) @map("created_at")
  updatedAt  DateTime @updatedAt @map("updated_at")

  @@unique([identifier, token])
  @@map("verification_tokens")
}

model Group {
  id          String   @id @default(cuid())
  name        String   @unique
  description String?
  parentId    String?  @map("parent_id")
  createdAt   DateTime @default(now()) @map("created_at")
  updatedAt   DateTime @updatedAt @map("updated_at")

  @@map("groups")
}

model Menu {
  id          String   @id @default(cuid())
  name        String
  href        Int
  icon        String?
  description String?
  parentId    String?  @map("parent_id")
  sort        Int?
  createdAt   DateTime @default(now()) @map("created_at")
  updatedAt   DateTime @updatedAt @map("updated_at")

  @@map("menus")
}

model Permission {
  id             String           @id @default(cuid())
  name           String           @unique
  description    String?
  operator       String?
  target         String?
  createdAt      DateTime         @default(now()) @map("created_at")
  updatedAt      DateTime         @updatedAt @map("updated_at")
  RolePermission RolePermission[]

  @@map("permissions")
}

model RolePermission {
  permissionId String     @map("permission_id")
  roleId       String     @map("role_id")
  createdAt    DateTime   @default(now()) @map("created_at")
  updatedAt    DateTime   @updatedAt @map("updated_at")
  roles        Role       @relation(fields: [roleId], references: [id], onDelete: Cascade)
  permissions  Permission @relation(fields: [permissionId], references: [id], onDelete: Cascade)

  @@id([permissionId, roleId])
  @@map("role_permissions")
}

model Role {
  id             String           @id @default(cuid())
  /// @zod.max(255, { message: "The title must be shorter than 256 characters" })
  name           String           @unique
  description    String?
  parentId       Int?             @default(0) @map("parent_id")
  createdAt      DateTime         @default(now()) @map("created_at")
  updatedAt      DateTime         @updatedAt @map("updated_at")
  RolePermission RolePermission[]
  UserRole       UserRole[]

  @@map("roles")
}

model UserRole {
  userId    String   @map("user_id")
  roleId    String   @map("role_id")
  createdAt DateTime @default(now()) @map("created_at")
  updatedAt DateTime @updatedAt @map("updated_at")
  roles     Role     @relation(fields: [roleId], references: [id], onDelete: Cascade)
  users     User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@id([userId, roleId])
}

generator zod {
  provider = "zod-prisma"
  output   = "./zod" // (default) the directory where generated zod schemas will be saved

  relationModel = true // (default) Create and export both plain and related models.
  // relationModel         = "default" // Do not export model without relations.
  // relationModel         = false // Do not generate related model

  modelCase = "PascalCase" // (default) Output models using pascal case (ex. UserModel, PostModel)
  // modelCase             = "camelCase" // Output models using camel case (ex. userModel, postModel)

  modelSuffix = "Model" // (default) Suffix to apply to your prisma models when naming Zod schemas

  // useDecimalJs          = false // (default) represent the prisma Decimal type using as a JS number
  useDecimalJs = true // represent the prisma Decimal type using Decimal.js (as Prisma does)

  // imports                  = null // (default) will import the referenced file in generated schemas to be used via imports.someExportedVariable

  // https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-by-null-values
  prismaJsonNullability = true // (default) uses prisma's scheme for JSON field nullability
  // prismaJsonNullability = false // allows null assignment to optional JSON fields
}
